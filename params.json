{
  "name": "Business Rules",
  "tagline": "Simple Business Rules",
  "body": "# BusinessRules\r\nSimple Business Rules\r\n\r\n1. Create/update Facts from UI\r\n2. Create/update rules for fact from UI\r\n3. Assign a rule group name to rules, to execute set of rules against a Fact\r\n4. Rest based services to execute the rules\r\n\r\nPending Items:\r\n\r\n1. Add more test cases\r\n\r\n# How to add custom methods\r\n\r\n1. All custom methods should be added in BusinessRules.BasicMethodsLibrary class library project\r\n2. All custom methods should be part of class \"BasicMethods\" and should be in namespace \"M\". As this is the pattern used in \"Core\" to identify the custom methods. So new set of methods can be added to existing class or a new partial class file can be created.\r\n3. HelperMethod attribute should be present with all custom methods for example\r\n```\r\n[HelperMethod(\"StringConcatenate\", 2, \"string, string\")]\r\n```\r\nFirst parameter is dummy name, second is number of parameter this function accepts and third is type of parameters this method accepts.\r\n\r\nCustom methods are useful for complicated formulas, database lookups, using data from REST APIs or any custom feature.\r\n\r\nSuch as to implement an Excel like \"IF\" method implement a method using following signature\r\n```\r\nT IF<T>(bool condition, T ActionIftrue, T ActionIfFalse);\r\n```\r\n\r\n# Rest End points\r\nBusinessRules.Console project shows a sample usage of how to execute rules via rest call.\r\nThere are 2 end points to execute rules\r\n\r\n1. api/async/executerule - To execute a single rule\r\n2. api/async/executerulegroup - To execute set of rules with in a same rule group\r\n\r\n# Rule Groups\r\nAll rules in a Rule Group should have same Facts associated.\r\n\r\n# Writing Rules\r\n\r\nWrite rules in a similar way you would write a Linq query or regular conditions\r\n\r\nFor example, Lets assume we have fact Person\r\n```\r\nclass Person\r\n{\r\n  public string Name { get; set; }\r\n  public int Age { get; set; }\r\n}\r\n```\r\n\r\nTo write a rule condition where age is between 20 and 30\r\n```\r\n(Person.Age > 20 And Person.Age < 30)\r\n```\r\n\r\nNow to add the execution (Action) part\r\n\r\nFirst assign a property to the action and its order of execution as well (because a single rule can have multiple actions)\r\n\r\nNow lets say if above condition is true, then we have to multiple age by 2 and concatenate \"Updated\" in the Name.\r\n\r\nSo we will add 2 executions to rule.\r\n\r\nFirst one would look like this\r\n\r\nProperty = Age, Order = 1 and rule execution should look like this\r\n```\r\nPerson.Age * 2\r\n```\r\n\r\nSecond would look like this\r\n\r\nProperty = Name, Order = 2 and rule execution should look like this\r\n```\r\nPerson.Name + \"Updated\"\r\n```\r\n\r\n#### Rules example:\r\n\r\nIn below screenshot M.Multiply is custom method which accepts 2 int type parameter\r\n\r\n![Alt text](https://raw.githubusercontent.com/lokeshlal/BusinessRules/master/rules_demo.png \"rules\")\r\n\r\n\r\n#### Note\r\n\r\nFor client library usage, i.e. how to call rules from client application, please see BusinessRules.Client and BusinessRules.Console project.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}